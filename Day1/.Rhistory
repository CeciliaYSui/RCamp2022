1 + 1
1 + 2
1 +
1
1 + 1
100:130
100:130
knitr::opts_chunk$set(echo = TRUE)
# The colon operator (:) returns every integer between two integers.
# It is an easy way to create a sequence of numbers.
100:130
# The colon operator (:) returns every integer between two integers.
# It is an easy way to create a sequence of numbers.
100:130
# The colon operator (:) returns every integer between two integers.
# It is an easy way to create a sequence of numbers.
100:130
# The colon operator (:) returns every integer between two integers.
# It is an easy way to create a sequence of numbers.
100:130
1 + 1
3 % 5
3 %% 5
5 %% 3
2 * 3
4 - 1
6 / (4 - 1)
2 ^ 3
2 ** 3
3 + 3 * 20
(3+3) *20
4 - 1
4-1
4   -    1
4 - 1
6 / (4 - 1)
'^'(2,3)
2 ^ 3
2 ** 3
'^'(2,3)
# This is a comment.
## This is also a comment.
### This is still a comment.
### Comment again. #######
# ahdogjoajsiogjosjj
37 + 2
37 + 2
* 3
37 + 2
39 * 3
117 - 6
37 + 2
39 * 3
117 - 6
111 /3
1:6
1:6
1: 100
1:     6
1   : 6
a <- 1
a
a = 1
a
a + 2
a
a <- 1 # assignment statement <- or =
a
a + 2
a
a = a + 2
a
ls()
b = a + 2
ls()
var <- 0
Var <- 1
vAR = 10
vaR = 100
my_number <- 1
my_number
my_number <- 999
my_number
ls()
die <- 1:6
die = 1:6
die
die - 1
die / 2
die * die
die - 1
die / 2
die * die
die
die
die - 1
die = 1:55
die - 1
die
die * die
die * (die-1)
die
die = 1:6
die - 1
die = 1:6
die - 1
die * (die-1)
1:2
1:4
die
die + 1:2
die + 1:4
die
1:4
die + 1:4
die %*% die
help("%*%")
?mean
help("mean")
1:6
die <- 1:6
die <- 1:6
die <- c(1, 2, 3, 4, 5, 6)
die
typeof(die)
die = 1:6
typeof(die)
die <- 1:6
die
die <- c(1, 2, 3, 4, 5, 6)
die
typeof(die)
die <- 1:6
typeof(die)
# is.vector tests whether an object is an atomic vector.
# It returns TRUE if the object is an atomic vector and FALSE otherwise.
is.vector(die)
# is.vector tests whether an object is an atomic vector.
# It returns TRUE if the object is an atomic vector and FALSE otherwise.
is.vector(die + 2)
# is.vector tests whether an object is an atomic vector.
# It returns TRUE if the object is an atomic vector and FALSE otherwise.
is.vector(die / 2)
# is.vector tests whether an object is an atomic vector.
# It returns TRUE if the object is an atomic vector and FALSE otherwise.
is.vector(TRUE)
# is.vector tests whether an object is an atomic vector.
# It returns TRUE if the object is an atomic vector and FALSE otherwise.
is.vector(die)
five <- 5
five
is.vector(five)
length
# length returns the length of an atomic vector.
length(five)
length(die)
text <- "ace"
text <- "ace"
num <- 13
typeof(num)
num <- "13"
typeof(num)
num <- 13L # double by default.
typeof(num)
3.14
3
sqrt(2)^2 - 2  == 0
sqrt(2)^2 - 2
text <- c("ace", "hearts")
typeof(text)
num <- c(1,2,3,4,5,"6",10)
typeof(num)
num <- c(1,2,3,4,5,6,10)
sum(die)
die
sum(text)
sum("ace")
sum("ace")
# Error in sum(text) : invalid 'type' (character) of argument
#
charToRaw("a")
# Error in sum(text) : invalid 'type' (character) of argument
#
charToRaw("ace")
# Error in sum(text) : invalid 'type' (character) of argument
#
charToRaw("1")
# Error in sum(text) : invalid 'type' (character) of argument
#
charToRaw("1")
# Error in sum(text) : invalid 'type' (character) of argument
#
charToRaw("10")
.5
0.5
die <- c(1, 2, 3, 4, 5, 6)
typeof(die)
text <- c("Joe",  "Biden")
text
typeof(text)
typeof("Biden")
text <- c("123456", "Hi!", "/ This is the division symbol.")
text
typeof(text)
3 > 4
3 < 4
sqrt(2)^2 - 2  == 0  # Be careful of floating-point error due to R's limitation on storing doubles.
sqrt(2)^2 - 2  == 0 # Be careful of floating-point error due to R's limitation on storing doubles.
sqrt(2)
sqrt(2)^2
sqrt(2)^2 - 2  == 0
sqrt(2)^2 - 2
sqrt(2)^2 - 2  == 0
sqrt(3)
"TRUE"
logic <- c(T,F,T)
logic <- c(TRUE, FALSE, TRUE)
logic
logic <- c(T,F,T)
logic
T = 10
F = 20
logic <- c(TRUE, FALSE, TRUE)
logic <- c(T,F,T)
logic
typeof(logic)
typeof(F)
typeof(TRUE)
logic <- c(TRUE, FALSE, TRUE)
logic <- c(T,F,T)
logic
logic <- c(TRUE, FALSE, TRUE)
logic
typeof(logic)
typeof(F)
typeof(TRUE)
typeof(F)
typeof(FALSE)
typeof(FALSE)
F = FALSE
typeof(F)
a <- 1
a
attributes(die)
die <- 1:6
attributes(die)
names(die)
names(die)
# The vector should include one name for each element in die
names(die) <- c("one", "two", "three", "four", "five", "six")
# Now die has a names attribute
attributes(die)
die
names(die) <- NULL
names(die)
die
length(die)
dim(die) <-c(2, 3)
die
dim(die) <-c(3, 2)
die
dim(die) <-c(2, 3)
die
dim(die) <-c(2, 3)
die
die
die = 1:6
matrix(die, nrow = 2)
m <- matrix(die, nrow = 2)
m
m <- matrix(die, nrow = 3)
m
m <- matrix(die, nrow = 2)
m
m <- matrix(die, nrow = 2, byrow = TRUE)
m
die = 1:6
die = 1:6
die
m <- matrix(die, nrow = 2, byrow = FALSE)
m
matrix(1,3,2) # This creates a 3 by 2 unit matrix
# (value, row, col)
matrix(0,4,3) # This creates a 4 by 3 zero matrix
A <- matrix(c(2,3,-2,1,2,2),3,2)
A
dim(A)
3 * A
A
B <- matrix(c(1,4,-2,1,2,1),3,2)
B
A + B
B <- matrix(c(1,4,-2,1,2,1),3,2)
A
B
A + B
A - B
C <- matrix(c(2,-2,1,2,3,1),2,3)
C
C %*% A
A %*% C
dim(C)
dim(A)
dim(C)
dim(A)
A
C <- matrix(c(2,-2,1,2,3,1),2,3)
A
C
dim(C)
dim(A)
C %*% A
A %*% C
A
t(A)
A
t(A)
t(t(A))
A
t(A)
t(t(A))
A
t(A)
t(t(A))
D <- matrix(c(4,4,-2,2,6,2,2,8,4),3,3)
D
solve(D)
solve(D)
det(D)
D
det(D)
D
det(D)
A
B
cbind(A,B)
A
B
A
B
cbind(A,B)
dim(cbind(A,B))
cbind(A,B)
rbind(A,B)
I <- matrix(1,3,3)
I
I <- matrix(diag(1,3,3),3,3)
I
?diag()
diag(2,5,5)
diag(2,5,3)
diag(c(1:5),5,5)
I <- diag(c(1:5),5,5)
I
I <- diag(c(1:5),5,5)
knitr::opts_chunk$set(echo = TRUE)
list1 <- list(100:130, "R", list(TRUE, FALSE))
100:130
"R"
list(TRUE, FALSE)
list1 <- list(100:130, "R", list(TRUE, FALSE))
list1
card <- list("ace", "hearts", 1)
card
card <- list("ace", "hearts", 1)
card
df <- data.frame(face = c("ace", "two", "six"),
suit = c("clubs", "clubs", "clubs"),
value = c(1, 2, 3))
df
View(df)
df
df <- data.frame(face = c("ace",  "six"),
suit = c("clubs", "clubs", "clubs"),
value = c(1, 2, 3))
df <- data.frame(face = c("ace", "two", "six"),
suit = c("clubs", "clubs", "clubs"),
value = c(1, 2, 3))
df
# View(df)
df <- data.frame(Face = c("ace", "two", "six"),
Suit = c("clubs", "clubs", "clubs"),
Value = c(1, 2, 3))
df
# View(df)
df <- data.frame(HappyFace = c("ace", "two", "six"),
Suit = c("clubs", "clubs", "clubs"),
Value = c(1, 2, 3))
df
# View(df)
typeof(df)
class(df)
str(df)
# ?str
str(df)
deck <- data.frame(
face = c("king", "queen", "jack", "ten", "nine", "eight", "seven", "six",
"five", "four", "three", "two", "ace", "king", "queen", "jack", "ten",
"nine", "eight", "seven", "six", "five", "four", "three", "two", "ace",
"king", "queen", "jack", "ten", "nine", "eight", "seven", "six", "five",
"four", "three", "two", "ace", "king", "queen", "jack", "ten", "nine",
"eight", "seven", "six", "five", "four", "three", "two", "ace"),
suit = c("spades", "spades", "spades", "spades", "spades", "spades",
"spades", "spades", "spades", "spades", "spades", "spades", "spades",
"clubs", "clubs", "clubs", "clubs", "clubs", "clubs", "clubs", "clubs",
"clubs", "clubs", "clubs", "clubs", "clubs", "diamonds", "diamonds",
"diamonds", "diamonds", "diamonds", "diamonds", "diamonds", "diamonds",
"diamonds", "diamonds", "diamonds", "diamonds", "diamonds", "hearts",
"hearts", "hearts", "hearts", "hearts", "hearts", "hearts", "hearts",
"hearts", "hearts", "hearts", "hearts", "hearts"),
value = c(13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 13, 12, 11, 10, 9, 8,
7, 6, 5, 4, 3, 2, 1, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 13, 12, 11,
10, 9, 8, 7, 6, 5, 4, 3, 2, 1)
)
# View(deck)
## You can run View(deck) to invoke the data viewer in R.
View(deck)
df <- data.frame(name,score,attempst,qualify)
# 2.
name = c('Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas')
score = c(12.5, 9, 16.5, 12, 9, 20, 14.5, 13.5, 8, 19)
attempts = c(1, 3, 2, 3, 2, 3, 1, 1, 2, 1)
qualify = c('yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes')
df <- data.frame(name,score,attempst,qualify)
# 2.
name = c('Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas')
score = c(12.5, 9, 16.5, 12, 9, 20, 14.5, 13.5, 8, 19)
attempts = c(1, 3, 2, 3, 2, 3, 1, 1, 2, 1)
qualify = c('yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes')
df <- data.frame(name,score,attempts,qualify)
df <- data.frame(cbind(name,score,attempts,qualify))
df <- data.frame(name,score,attempts,qualify)
df <- data.frame(name,score,attempts,qualify)
View(df)
getwd()
version
list()
ls()
list.files()
devtools::install_github("rmarkdown")
devtools::install_github("Rmarkdown")
install.packages("tinytex")
tinytex::install_tinytex()
getwd()
setwd("/Users/ysui/Desktop/RCamp2022/Day1")
update.packages()
update.packages(ask = FALSE)
a <- 1:10
b <- 10:20
c <- 10:30
l <- list(list(list(a,b), c), c)
l
l[[1]][[1]][[1]]
l[[1]][[1]][[1]][1]
as.matrix()
as.matrix(1:6)
is.matrix(1:6)
