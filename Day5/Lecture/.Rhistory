.libPaths()
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
hook_output <- knit_hooks$get("output")
knit_hooks$set(output = function(x, options) {
lines <- options$output.lines
if (is.null(lines)) {
return(hook_output(x, options))  # pass to default hook
}
x <- unlist(strsplit(x, "\n"))
more <- "..."
if (length(lines)==1) {        # first n lines
if (length(x) > lines) {
# truncate the output, but add ....
x <- c(head(x, lines), more)
}
} else {
x <- c(more, x[lines], more)
}
# paste these lines together
x <- paste(c(x, ""), collapse = "\n")
hook_output(x, options)
})
# http://r-statistics.co/Complete-Ggplot2-Tutorial-Part1-With-R-Code.html
# For example:
library(dplyr)
library()
help(lm)
help("lm") # quotation marks are optional
?lm
?"lm"
?sample
?"lm"
help(?)
help(?)
help("?")
help(rlm, package = "MASS")
?sample
??log
??dplyr
# # If you have not installed the package dplyr,
# # please un-comment and run the following line in your console.
# install.packages("dplyr")
library(dplyr)
# We will use the same worldTFR dataset again for simplicity.
worldTFR <- read.csv("worldTFR.csv")
# check structure of your df first
filter(worldTFR, Year == "1950")
# or equivalently using the pipe operator
# This is a cleaner approach
worldTFR %>% filter(Year == "1950")
worldTFR[worldTFR$Year == "1950", ] # Don't forget the comma!
worldTFR %>% filter(Year == "1950", TFR >= 7.5, Uncode > 500)
worldTFR %>% filter(!is.na(GDPpc))
# You can also add more conditions here:
worldTFR %>% filter(!is.na(GDPpc), TFR > 5)
worldTFR.na <- worldTFR %>% filter(complete.cases(.))
# equivalently to: na.omit(worldTFR)
summary(worldTFR.na)
worldTFR.na %>% arrange(Year, TFR)
# desc in Year, but still ascending in TFR
worldTFR.na %>% arrange(desc(Year), TFR)
worldTFR.na %>% slice(5:10)
worldTFR.na %>% slice_head(n = 3)
worldTFR.na %>% slice_head(n = 10)
worldTFR.na %>% slice_tail(n = 3)
worldTFR.na %>% slice_tail(n = 10)
worldTFR.na %>% slice_sample(n = 5)
worldTFR.na %>% slice_sample(n = 5)
worldTFR.na %>% slice_sample(n = 10)
worldTFR.na %>% slice_sample(prop = 0.1)
worldTFR.na %>% slice_sample(prop = 0.1)
worldTFR.na %>% slice_sample(prop = 0.3)
worldTFR.na %>% slice_sample(prop = 0.1, replace = TRUE)
worldTFR.na %>% slice_sample(prop = 0.1, replace = FALSE)
worldTFR %>%
filter(!is.na(GDPpc)) %>% # you can have multiple pipes
slice_max(GDPpc, n = 3)
worldTFR %>%
filter(!is.na(Yschooling)) %>%
slice_max(TFR, n = 3)
worldTFR %>% select(CountryCode, Year, TFR)
worldTFR %>% select(CountryCode, Year, "TFR")
worldTFR %>% select(CountryCode, Year, TFR)
worldTFR %>% select("CountryCode", Year, TFR)
worldTFR %>% select("CountryCode", Year, TFR)
dplyr::select
worldTFR %>% dplyr::select(CountryCode, Year, TFR)
worldTFR.na %>% select(Year:LifeExpB)
worldTFR.na %>% select(Year:LifeExpB)
worldTFR.na %>% select(!(Year:LifeExpB))
worldTFR.na %>% mutate(ChildBearing_r = round(ChildBearing,0))
df <- worldTFR %>%
mutate(ChildBearing_r = round(ChildBearing,0)) %>%
filter(!is.na(GDPpc), !is.na(Yschooling), TFR > 5) %>%
select(CountryCode, Year, TFR, GDPpc, Yschooling, ChildBearing_r)
worldTFR <- worldTFR %>%
mutate(ChildBearing_r = round(ChildBearing,0)) %>%
filter(!is.na(GDPpc), !is.na(Yschooling), TFR > 5) %>%
select(CountryCode, Year, TFR, GDPpc, Yschooling, ChildBearing_r)
View(worldTFR)
df2 <- worldTFR %>%
mutate(ChildBearing_r = round(ChildBearing,0)) %>%
filter(!is.na(GDPpc), !is.na(Yschooling), TFR > 5) %>%
select(CountryCode, Year, TFR, GDPpc, Yschooling, ChildBearing_r)
worldTFR <- read.csv("worldTFR.csv")
worldTFR  %>% slice_head(10) + slice_tail(3)
worldTFR  %>% slice_head(10) & slice_tail(3)
worldTFR  %>% slice_head(10) %>%
slice_tail(3)
dim(worldTFR)
worldTFR  %>% slice_head(1:10 & 12339:12342)
worldTFR  %>% slice(1:10 & 12339:12342)
worldTFR  %>% slice(c(1:10 , 12339:12342))
df1 <- worldTFR %>% slice_head(10)
df1 <- worldTFR %>% slice_head(10)
df1 <- worldTFR %>% slice_head(10)
worldTFR %>% slice_head(10)
# dim(worldTFR)
worldTFR  %>% slice(c(1:10 , 12339:12342))
View(worldTFR)
# dim(worldTFR)
worldTFR  %>% slice(c(1:10 , 12339:12342))
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv("resources.csv")
colnames(df)
View(df)
worldTFR <- read.csv("worldTFR.csv")
summary(worldTFR)
dim(worldTFR)[1]
12339:12342
worldTFR  %>% slice(c(1:10 , 12340:12342))
12340:12342
1:10
worldTFR  %>% slice(c(1:10 , 12340:12342))
df4 <- worldTFR  %>% slice(c(1:10 , 12340:12342))
View(df4)
df4 <- worldTFR  %>% slice_head(10)
worldTFR  %>% slice_head(10)
dim(worldTFR)[1]
worldTFR  %>% slice(c(1:10 , 12340:12342))
View(df4)
# install.packages("ggplot2")
library(ggplot2)
data = USArrests # built-in dataset
?USArrests
# ?USArrests
ggplot(data, aes(x = UrbanPop, y = Assault)) + geom_point()
data = USArrests # built-in dataset
# ?USArrests
ggplot(data, aes(x = UrbanPop, y = Assault)) + geom_point()
# ?USArrests
ggplot(data, aes(x = UrbanPop, y = Assault))
# sort of equivalent to doing this with the baseplot
plot(data$UrbanPop, data$Assault)
# ?USArrests
ggplot(data, aes(x = UrbanPop, y = Assault)) + geom_point()
?ggplot
# ?USArrests
ggplot(data, aes(x = UrbanPop, y = Assault)) + geom_point()
ggplot(data, aes(x=UrbanPop, y=Assault)) +
geom_point() +
geom_smooth(method="lm")
ggplot(data, aes(x=UrbanPop, y=Assault)) +
geom_point() +
geom_smooth(method="lm", se = FALSE)
ggplot(data, aes(x=UrbanPop, y=Assault)) +
geom_point() +
geom_smooth(method="lm", se = TRUE)
ggplot(data, aes(x=UrbanPop, y=Assault)) +
geom_point() +
geom_smooth(method="lm")  +
xlim(c(40, 80)) + ylim(c(0, 350))   # deletes points
ggplot(data, aes(x=UrbanPop, y=Assault)) +
geom_point() +
geom_smooth(method="lm") +
xlim(c(30, 90)) + ylim(c(0, 350)) +
ggtitle("Urban Population Vs Assault",
subtitle="Using the built-in dataset USArrests") +
xlab("Urban Population") +
ylab("Assault")
ggplot(data, aes(x=UrbanPop, y=Assault)) +
geom_point() +
geom_smooth(method="lm",  col="skyblue") + # change the color of line
xlim(c(30, 90)) + ylim(c(0, 350)) +
labs(title="Urban Population VS Assault",
subtitle="Using the built-in dataset USArrests",
y="Assault", x="Urban Population")
ggplot(data, aes(x=UrbanPop, y=Assault)) +
geom_smooth(method="lm",  col="skyblue") + # change the color of line
xlim(c(30, 90)) + ylim(c(0, 350)) +
labs(title="Urban Population VS Assault",
subtitle="Using the built-in dataset USArrests",
y="Assault", x="Urban Population") +
geom_point(col="pink", size=3) # Set static color and size for points
ggplot(data, aes(x=UrbanPop, y=Assault)) +
geom_smooth(method="lm",  col="skyblue") + # change the color of line
xlim(c(30, 90)) + ylim(c(0, 350)) +
labs(title="Urban Population VS Assault",
subtitle="Using the built-in dataset USArrests",
y="Assault", x="Urban Population") +
geom_point(col="pink", size=1) # Set static color and size for points
ggplot(data, aes(x=UrbanPop, y=Assault)) +
geom_smooth(method="lm",  col="skyblue") + # change the color of line
xlim(c(30, 90)) + ylim(c(0, 350)) +
labs(title="Urban Population VS Assault",
subtitle="Using the built-in dataset USArrests",
y="Assault", x="Urban Population") +
geom_point(col="pink", size=1, alpha = 0.8) # Set static color and size for points
ggplot(data, aes(x=UrbanPop, y=Assault)) +
geom_smooth(method="lm",  col="skyblue") + # change the color of line
xlim(c(30, 90)) + ylim(c(0, 350)) +
labs(title="Urban Population VS Assault",
subtitle="Using the built-in dataset USArrests",
y="Assault", x="Urban Population") +
geom_point(col="pink", size=1) # Set static color and size for points
ggplot(data, aes(x=UrbanPop, y=Assault)) +
geom_point() +
geom_smooth(method="lm",  col="skyblue") +
xlim(c(30, 90)) + ylim(c(0, 350)) +
labs(title="Urban Population VS Assault",
subtitle="Using the built-in dataset USArrests",
y="Assault", x="Urban Population") +
geom_point(col="pink", size=3)
ggsave("myplot.png")
list.files()
g1 <- ggplot(data, aes(x=UrbanPop, y=Assault)) +
geom_point() +
geom_smooth(method="lm",  col="skyblue") +
xlim(c(30, 90)) + ylim(c(0, 350)) +
labs(title="Urban Population VS Assault",
subtitle="Using the built-in dataset USArrests",
y="Assault", x="Urban Population") +
geom_point(col="pink", size=3)
ggsave("myplot.pdf", plot = g1)
df <- na.omit(worldTFR)
df <- na.omit(worldTFR)
ggplot(df, aes(x = LifeExpB, y = TFR)) + geom_point()
ggplot(df, aes(x = LifeExpB, y = TFR)) + geom_point(col = "pink", size = 0.5)
ggplot(df, aes(x = LifeExpB, y = TFR)) + geom_point(col = "skyblue", size = 0.5)
ggplot(df, aes(x = LifeExpB, y = TFR)) + geom_point(col = "red", size = 0.5)
ggplot(df, aes(x = LifeExpB, y = TFR)) +
geom_point(col = "red", size = 0.5) +
labs(title="Correlation between TFR and LifeExpB",
y="Total Fertility Rate", x="Life Expectancy at Birth")
ggplot(df, aes(x = LifeExpB, y = TFR)) +
geom_point(col = "red", size = 0.5) +
labs(title="Relationship between TFR and LifeExpB",
y="Total Fertility Rate", x="Life Expectancy at Birth")
dir.create("plots")
g2 <- ggplot(df, aes(x = LifeExpB, y = TFR)) +
geom_point(col = "red", size = 0.5) +
labs(title="Relationship between TFR and LifeExpB",
y="Total Fertility Rate", x="Life Expectancy at Birth")
ggsave("g2.png", plot = g2)
list.files()
plot(1:100, sample(1:10000, 100))
palette.colors()
ggplot(data, aes(x=UrbanPop, y=Assault)) +
geom_smooth(method="lm",  col="#5FD6C6") + # change the color of line
xlim(c(30, 90)) + ylim(c(0, 350)) +
labs(title="Urban Population VS Assault",
subtitle="Using the built-in dataset USArrests",
y="Assault", x="Urban Population") +
geom_point(col="pink", size=1) # Set static color and size for points
ggplot(data, aes(x=UrbanPop, y=Assault)) +
geom_smooth(method="lm",  col="red") + # change the color of line
xlim(c(30, 90)) + ylim(c(0, 350)) +
labs(title="Urban Population VS Assault",
subtitle="Using the built-in dataset USArrests",
y="Assault", x="Urban Population") +
geom_point(col="pink", size=1) # Set static color and size for points
palette.colors()
ggplot(data, aes(x=UrbanPop, y=Assault)) +
geom_smooth(method="lm",  col="black") + # change the color of line
xlim(c(30, 90)) + ylim(c(0, 350)) +
labs(title="Urban Population VS Assault",
subtitle="Using the built-in dataset USArrests",
y="Assault", x="Urban Population") +
geom_point(col="pink", size=1) # Set static color and size for points
palette.colors()
ggplot(data, aes(x=UrbanPop, y=Assault)) +
geom_smooth(method="lm",  col="#000000") + # change the color of line
xlim(c(30, 90)) + ylim(c(0, 350)) +
labs(title="Urban Population VS Assault",
subtitle="Using the built-in dataset USArrests",
y="Assault", x="Urban Population") +
geom_point(col="pink", size=1) # Set static color and size for points
ggplot(data, aes(x=UrbanPop, y=Assault)) +
geom_smooth(method="lm",  col="#ffffff") + # change the color of line
xlim(c(30, 90)) + ylim(c(0, 350)) +
labs(title="Urban Population VS Assault",
subtitle="Using the built-in dataset USArrests",
y="Assault", x="Urban Population") +
geom_point(col="pink", size=1) # Set static color and size for points
ggplot(data, aes(x=UrbanPop, y=Assault)) +
geom_smooth(method="lm",  col="#D35FB7") + # change the color of line
xlim(c(30, 90)) + ylim(c(0, 350)) +
labs(title="Urban Population VS Assault",
subtitle="Using the built-in dataset USArrests",
y="Assault", x="Urban Population") +
geom_point(col="pink", size=1) # Set static color and size for points
df %>% select(Year= 1978)
df %>% select(Year== 1978)
df <- read.csv("resources.csv")
colnames(df)
df %>% select(year == 1978)
df %>% select(year == 1978)
library(dplyr)
df <- read.csv("resources.csv")
colnames(df)
df %>% select(year == 1978)
# For example:
library(dplyr)
# check structure of your df first
filter(worldTFR, Year == "1950")
worldTFR <- read.csv("worldTFR.csv")
# or equivalently using the pipe operator
# This is a cleaner approach
worldTFR %>% filter(Year == "1950")
df %>% filter(year == "1978")
df %>% filter(Year == "1978")
library(dplyr)
df <- read.csv("resources.csv")
colnames(df)
df %>% filter(Year == "1978")
str(df)
df %>% filter(year == 1966)
summary(df)
worldTFR <- read.csv("worldTFR.csv")
summary(worldTFR)
View(worldTFR)
colnames(worldTFR)
