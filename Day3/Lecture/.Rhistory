a <- 5
b <- 5
if (a < b) {
print("a is smaller than b")
} else if (a == b) {
print("a is equal to b")
} else {
print("a is greater than b")
}
a <- 5
b <- 5
if (a < b) {
print("a is smaller than b")
} else if (a == b) {
print("a is equal to b")
} else if (a > b) {
print("a is greater than b")
} else {
print("haha")
}
a <- 10
b <- 5
if (a < b) {
print("a is smaller than b")
} else if (a == b) {
print("a is equal to b")
} else if (a > b) {
print("a is greater than b")
} else {
print("haha")
}
# This code block is not executable. Just for illustration.
ifelse(condition, exp_if_true, exp_if_false)
ifelse(a < 7, "a is less than 7", "a is greater than 7")
a
a < 7
ifelse(a < 7, "a is less than 7", "a is greater than 7")
ifelse(a < 7, "a is less than 7", "a is greater than 7")
vec <- c(1:10)
vec
i in vec
for (i in vec) {
print(vec[i])
}
print(vec[1])
vec
print(vec[2])
vec
print(vec[10])
vec <- c(1:10)
vec
for (i in vec) {
print(vec[i])
}
vec <- c(1:10)
vec
vec2 <- c(10:20)
for (i in vec) {
print(vec2[i])
}
vec <- c(1:10)
vec
vec2 <- c(10:20)
for (i in 1:10) {
print(vec2[i])
}
vec <- c(1:10)
vec
vec2 <- c(10:20)
vec2
for (i in 1:10) {
print(vec2[i])
}
vec <- c(1:10)
vec
vec2 <- c(10:20)
vec2
for (i in 1:11) {
print(vec2[i])
}
for (i in vec) {
print(vec2[i])
}
vec <- c(5:10)
vec
vec2 <- c(10:20)
vec2
for (i in vec) {
print(vec2[i])
}
vec <- c(1:11)
vec
vec2 <- c(10:20)
vec2
for (i in vec) {
print(vec2[i])
}
for (i in 1:dim(df)[1]){
print(df$Year[i])
}
for (i in 1:dim(df)[1]){
print(df$GNP[i])
}
for (i in 1:dim(df)[1]){
print(df$Population[i])
}
for (i in 1:dim(df)[1]){
print(df[i])
}
for (i in 1:dim(df)[1]){
print(df[i,])
}
for (i in 1:dim(df)[1]){
df[i,]
}
for (i in 1:dim(df)[1]){
print(df[i,])
}
dim(df)[1]
dim(df)[2]
dim(df)[1]
dim(df)
dim(df)[1]
dim(df)
dim(df)[1]
dim(df)
dim(df)[1]
for (i in 1:dim(df)[2]){
print(df$Year[i])
}
n1 <- dim(df)[1]
n2 <- dim(df)[2]
for (i in 1:n1){
print(df$Year[i])
}
n1 <- dim(df)[1]
n2 <- dim(df)[2]
for (i in 1:n2){
print(df$Year[i])
}
n1 <- dim(df)[1]
n2 <- dim(df)[2]
for (i in 1: 10){
print(df$Year[i])
}
n1 <- dim(df)[1]
n2 <- dim(df)[2]
for (i in 1:5){
print(df$Year[i])
}
n1 <- dim(df)[1]
n2 <- dim(df)[2]
for (i in 1:16){
print(df$Year[i])
}
n1 <- dim(df)[1]
n2 <- dim(df)[2]
for (i in 1:n2){
print(df$Year[i])
}
n1 <- dim(df)[1]
n2 <- dim(df)[2]
for (i in 1:n1){
print(df$Year[i])
}
for (i in 1:dim(df)[1]) {
if (df$Unemployed[i] > 300){
print(df$Year[i])
}
}
# For good practice, you can assign dim(df)[1] to a new variable.
# For example:
L <- dim(df)[1]
for (i in 1:dim(df)[2]) {
if (df$Unemployed[i] > 300){
print(df$Year[i])
}
}
# For good practice, you can assign dim(df)[1] to a new variable.
# For example:
L <- dim(df)[1]
for (i in 1:dim(df)[1]) {
if (df$Unemployed[i] > 300){
print(df$Year[i])
}
}
# For good practice, you can assign dim(df)[1] to a new variable.
# For example:
L <- dim(df)[1]
for (i in 1:dim(df)[2]) {
if (df$Unemployed[i] > 300){
print(df$Year[i])
}
}
# For good practice, you can assign dim(df)[1] to a new variable.
# For example:
L <- dim(df)[1]
for (i in 1:dim(df)[1]) {
if (df$Unemployed[i] > 300){
print(df$Year[i])
}
}
# For good practice, you can assign dim(df)[1] to a new variable.
# For example:
L <- dim(df)[1]
# For good practice, you can assign dim(df)[1] to a new variable.
# For example:
L <- dim(df)[1]
df$ratio <- NA
df$ratio <- NULL
df$ratio <- NA
# l <- dim(df)[1]
for (i in 1:L) {
df$ratio[i] <- df$Employed[i] / ( df$Unemployed[i] + df$Employed[i] )
}
View(longley)
View(df)
while (FALSE){
print("F")
}
# Don't run please
while (TRUE) {
print("T")
}
i <- 1 # i is initialized to 1
while (i < 6) {
print(i)
i = i+1 # increment i
}
i <- 1 # i is initialized to 1
while (i <= 6) {
print(i)
i = i+1 # increment i
}
i <- 1 # i is initialized to 1
while (i <= 6) {
print(i)
# i = i+1 # increment i
}
vec <- c(1:10)
for (i in vec) {
print(vec[i])
}
vec <- c(1:10)
i <- 1
while (i <= length(vec)){
print(vec[i])
i = i + 1
}
vec <- c(1:10)
for (i in vec) {
print(vec[i])
}
M <- 1000
means <- rep(NA, M)
for (i in M){
means[i] = sample(worldTFR$TFR, size = dim(worldTFR)[1], replace = TRUE)
}
M <- 1000
means <- rep(NA, M)
for (i in M){
means[i] = mean(sample(worldTFR$TFR, size = dim(worldTFR)[1], replace = TRUE))
}
means
sample(worldTFR$TFR, size = dim(worldTFR)[1], replace = TRUE)
# 1.
worldTFR <- read.csv("worldTFR.csv")
# In this case, TFR col has no NA's. Great!
# summary(worldTFR)
s1 <- sample(worldTFR$TFR, size = dim(worldTFR)[1], replace = TRUE)
# 2.
mean(s1)
mean(worldTFR$TFR)
# 3.
M <- 1000
means <- rep(NA, M)
for (i in M){
means[i] = mean(sample(worldTFR$TFR, size = dim(worldTFR)[1], replace = TRUE))
}
means
M <- 1000
means <- rep(NA, M)
for (i in M){
means[i] = mean(sample(worldTFR$TFR, size = dim(worldTFR)[1], replace = TRUE))
}
means
M <- 1000
means <- rep(NA, M)
mean(sample(worldTFR$TFR, size = dim(worldTFR)[1], replace = TRUE))
means[i] = mean(sample(worldTFR$TFR, size = dim(worldTFR)[1], replace = TRUE))
means[i]
i
M <- 1000
means <- rep(NA, M)
for (i in M){
means[i] = mean(sample(worldTFR$TFR, size = dim(worldTFR)[1], replace = TRUE))
}
means
for (i in 1:1000){
means[i] = mean(sample(worldTFR$TFR, size = dim(worldTFR)[1], replace = TRUE))
}
means
M <- 1000
means <- rep(NA, M)
for (i in 1:M){
means[i] = mean(sample(worldTFR$TFR, size = dim(worldTFR)[1], replace = TRUE))
}
mean(means)
M <- 1000
means <- rep(NA, M)
for (i in 1:M){
means[i] = mean(sample(worldTFR$TFR, size = dim(worldTFR)[1], replace = TRUE))
}
mean(means)
# 1.
worldTFR <- read.csv("worldTFR.csv")
# In this case, TFR col has no NA's. Great!
# summary(worldTFR)
s1 <- sample(worldTFR$TFR, size = dim(worldTFR)[1], replace = TRUE)
# 2.
mean(s1)
mean(worldTFR$TFR)
# 3.
set.seed(12345)
M <- 1000
means <- rep(NA, M)
for (i in 1:M){
means[i] = mean(sample(worldTFR$TFR, size = dim(worldTFR)[1], replace = TRUE))
}
mean(means)
set.seed(3737)
M <- 1000
means <- rep(NA, M)
for (i in 1:M){
means[i] = mean(sample(worldTFR$TFR, size = dim(worldTFR)[1], replace = TRUE))
}
mean(means)
set.seed(3737)
M <- 1000
means <- rep(NA, M)
for (i in 1:M){
means[i] = mean(sample(worldTFR$TFR, size = dim(worldTFR)[1], replace = TRUE))
}
mean(means)
set.seed(3737)
M <- 5000
means <- rep(NA, M)
for (i in 1:M){
means[i] = mean(sample(worldTFR$TFR, size = dim(worldTFR)[1], replace = TRUE))
}
mean(means)
var(means)
set.seed(3737)
M <- 5000
vars <- rep(NA, M)
for (i in 1:M){
vars[i] = var(sample(worldTFR$TFR, size = dim(worldTFR)[1], replace = TRUE))
}
mean(vars)
vars
var(worldTFR$TFR)
knitr::opts_chunk$set(echo = TRUE)
choose
?choose
data = 1:10
a = mean(data) - 3 * sd(data)
a
b = mean(data) + 3 * sd(data)
b
is.in = (data > a) & (data < b)
is.in
print(sum(!is.in))
data[is.in]
data = rnorm(2)
data
data = rnorm(10)
a = mean(data) - 3 * sd(data) # -3.582951
b = mean(data) + 3 * sd(data) # 14.58295
is.in = (data > a) & (data < b) # TRUE * 10
print(sum(!is.in)) # 0
data = rnorm(10)
a = mean(data) - 2 * sd(data)
b = mean(data) + 2 * sd(data)
is.in = (data > a) & (data < b)
print(sum(!is.in))
matches <- list(c(2,1),c(5,2),c(6,3))
for (match in matches){
if (match[1] > match[2]){
print("Win")
} else {
print ("Lose")
}
}
sample(1:0, 20, replace = TRUE, prob = c(0.75, 0.25))
mean(sample(1:0, 20, replace = TRUE, prob = c(0.75, 0.25)))
mean(sample(1:0, 20, replace = TRUE, prob = c(0.75, 0.25)))
mean(sample(1:0, 20, replace = TRUE, prob = c(0.75, 0.25)))
for (i in 1:10) {
print(mean(sample(1:0, 20, replace = TRUE, prob = c(0.75, 0.25))))
}
?choose
choose(5, 2)
lchoose(5,2)
choose.members(4,4,12)
choose.members = function(n,c,p) {
return(factorial(n)*choose(p,n)*choose(p-n,c))
### YOUR CODE GOES HERE
}
choose.members(4,4,12)
choose.members = function(n,c,p) {
return(factorial(n)*choose(p,n) + choose(p-n,c))
### YOUR CODE GOES HERE
}
choose.members(4,4,12)
choose.members = function(n,c,p) {
return(factorial(n)*choose(p,n) * choose(p-n,c))
### YOUR CODE GOES HERE
}
choose.members(4,4,12)
choose.members(3,3,12)
choose.members(3,3,10)
choose.members(4,4,12)
choose.members = function(n,c,p) {
return(factorial(n)*choose(p,n) * choose(p-n,c))
### YOUR CODE GOES HERE
}
choose.members(3,3,10)
choose.members(4,4,12)
v[is.even(v)]
is.even = function(n) {
### YOUR CODE GOES HERE
return(n %% 2 == 0)
}
is.even(v)
v = 1:10
is.even(v)
v[is.even(v)]
typeof(is.even(v))
# is.even(v) # "logical"
v[is.even(v)]
?!
)
?(!)
help(!)
help("!")
?ifelse
sample(x = c(0,1), size = 25, replace = TRUE, prob = c(0.55, 0.45))
mean1 <- rep(NA, 50)
var1 <- rep(NA, 50)
median1 <- rep(NA, 50)
sd1 <- rep(NA, 50)
for (i in 1:50){
sample <- sample(x = c(0,1), size = 25, replace = TRUE, prob = c(0.55, 0.45))
mean1[i] <- mean(sample)
var1[i] <- var(sample)
median1[i] <- median(sample)
sd1[i] <- sd(sample)
}
mean(mean1)
mean(mean1)
mean(var1)
mean(media1)
mean(mean1)
mean(var1)
mean(median1)
mean(sd1)
mean2 <- rep(NA, 50)
var2 <- rep(NA, 50)
median2 <- rep(NA, 50)
sd2 <- rep(NA, 50)
for (i in 1:50){
sample <- sample(x = c(0,1), size = 100, replace = TRUE, prob = c(0.55, 0.45))
mean2[i] <- mean(sample)
var2[i] <- var(sample)
median2[i] <- median(sample)
sd2[i] <- sd(sample)
}
mean(mean2)
mean(var2)
mean(median2)
mean(sd2)
cbind(2,1,10)
c(mean(mean1), mean(var1),mean(median1),mean(sd1))
cbind(mean(mean1), mean(var1),mean(median1),mean(sd1))
results <- cbind(mean(mean1), mean(var1), mean(median1), mean(sd1))
colnames(results)
names(results)
attributes(results)
c((mean(mean1), mean(var1), mean(median1), mean(sd1))
c(mean(mean1), mean(var1), mean(median1), mean(sd1))
dim(worldTFR)
new <- na.omit(worldTFR$TFR)
dim(new)
dim(worldTFR)
summary(worldTFR)
na.omit(worldTFR$GDPpc)
sample(worldTFR$TFR, size = 12342, replace = TRUE)
s1 <- sample(worldTFR$TFR, size = 12342, replace = TRUE)
s2 <- sample(worldTFR$TFR, size = 12342, replace = TRUE)
mean(s1)
mean(s2)
set.seed(3737)
s1 <- sample(worldTFR$TFR, size = 12342, replace = TRUE)
s2 <- sample(worldTFR$TFR, size = 12342, replace = TRUE)
mean(s1)
mean(s2)
worldTFR
worldTFR.a <- worldTFR[!is.na(worldTFR$GDPpc),]
dim(worldTFR)
worldTFR.a <- worldTFR[!is.na(worldTFR$GDPpc),]
dim(worldTFR.a)
?subset()
